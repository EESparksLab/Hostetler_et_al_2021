#Updated script for Hostetler_et_al_2021 PCE-Version 2-2021/12
#Scripts are broken down into section headers associated with the manuscript
setwd(dir = "/Users/ashleyhostetler/Desktop/Hostetler_et_al_2021/R Input Files/")
#Library Load
library(arsenal)
library(dplyr)
library(agricolae)
library(rcompanion)
library(corrplot)
library(lme4)
library(factoextra)
library(ggfortify)
library(car)
library(tidyverse)
library(tidymodels)
library(ranger)
library(kknn)
library(janitor)
library(data.table)
##Random Forest Models####
##Outcome = BRC, within year (2019) paired predictors + BRC
cat("\014")
rm(list=ls())
ls()
data12 <- read.csv(file = "Averaged2019_Pheno_and_Combined_Mech_Data_04132021.csv", header = TRUE, na.strings = "NA")
str(data12)
i <- c(1:5)
data12[,i] <- apply(data12[ ,i], 2,
function(x) as.character(x))
data12$Ratio..None.All....IMU = scale(data12$Ratio..None.All....IMU, center=TRUE, scale=TRUE)
data12$Ratio..None.All....IMU = as.numeric(data12$Ratio..None.All....IMU)
mean = mean(data12$Ratio..None.All....IMU)
sd = sd(data12$Ratio..None.All....IMU)
high = mean+sd
low = mean-sd
data12$Ratio_cat = data12$Ratio..None.All....IMU
data12$Ratio_cat = as.numeric(data12$Ratio_cat)
for (i in 1:length(data12$Ratio_cat)){
if (data12$Ratio..None.All....IMU[i] <= low) {
data12$Ratio_cat[i] = "low"
} else if (data12$Ratio..None.All....IMU[i] < high) {
data12$Ratio_cat[i] = "average"
} else if (data12$Ratio..None.All....IMU[i] >= high) {
data12$Ratio_cat[i] = "high"
}
}
colnames(data12)
plant_data = data12[,c(20,8,10:19)]
plant_data = janitor::clean_names(plant_data)
plant_split = rsample::initial_split(plant_data, prop = 0.9, strata = "brace_root_whorls_in_the_soil")
plant_test = rsample::testing(plant_split)
plant_train = rsample::training(plant_split)
plant_folds = rsample::vfold_cv(training(plant_split), v=5, repeats = 5)
rf_recipe = head(training(plant_split)) %>%
recipes::recipe(ratio_cat ~ .) %>%
recipes::step_string2factor(ratio_cat)
rf_tune = parsnip::rand_forest(trees = 100, mtry = tune(), min_n = tune()) %>%
parsnip::set_engine("randomForest") %>%
parsnip::set_mode("classification")
tune_wf = workflows::workflow() %>%
workflows::add_recipe(rf_recipe) %>%
workflows::add_model(rf_tune)
control = control_grid(extract = function(x) extract_model(x))
tune_res = tune::tune_grid(tune_wf, resample=plant_folds, grid=5, control=control)
tunes_metrics = tune::collect_metrics(tune_res)
best_params = tune::select_best(tune_res, "accuracy")
final_rf = tune::finalize_model(rf_tune, best_params)
final_wf = workflow() %>%
add_recipe(rf_recipe) %>%
add_model(final_rf)
final_wf
final_res = final_wf %>%
tune::last_fit(plant_split)
collect_metrics(final_res)
model = tune_res$.extracts[[1]]$.extracts[[1]]
model
randomForest::importance(model)
##Between year genotype; None/All averaged across years, all plants for pheno included
cat("\014")
##Between year genotype; None/All averaged across years, all plants for pheno included
cat("\014")
##Between year genotype; None/All averaged across years, all plants for pheno included
cat("\014")
rm(list=ls())
ls()
data <- read.csv(file = "Inbred_Subpop_2Years_Broot_Ratio_Processed.csv", header = TRUE, na.strings = "NA")
data1 = data %>%
group_by(Accession) %>%
summarise(Ratio_avg = mean(Ratio..None.All....IMU))
head(data1)
hist(data1$Ratio_avg)
data1$Ratio_avg2 = scale(data1$Ratio_avg, center=TRUE, scale=TRUE)
hist(data1$Ratio_avg2)
mean = mean(data1$Ratio_avg2)
sd = sd(data1$Ratio_avg2)
high = mean+sd
low = mean-sd
data1$Ratio_Category = data1$Ratio_avg2
for (i in 1:length(data1$Ratio_Category)){
if (data1$Ratio_avg2[i] <= low) {
data1$Ratio_Category[i] = "low"
} else if (data1$Ratio_avg2[i] < high) {
data1$Ratio_Category[i] = "average"
} else if (data1$Ratio_avg2[i] >= high) {
data1$Ratio_Category[i] = "high"
}
}
data1 = data1[,c(1,2,4)]
data2 <- read.csv(file = "Averaged2019_Pheno_and_Combined_Mech_Data_04132021.csv", header = TRUE, na.strings = "NA")
colnames(data2)
data2 = data2[,c(5,8:19)]
data2 = merge(data1, data2, by = "Accession")
str(data2)
colnames(data2)
plant_data = data2[,c(3:4,6:15)]
plant_data = janitor::clean_names(plant_data)
plant_split = rsample::initial_split(plant_data, prop = 0.9, strata = "brace_root_whorls_in_the_soil")
plant_test = rsample::testing(plant_split)
plant_train = rsample::training(plant_split)
plant_folds = rsample::vfold_cv(training(plant_split), v=5, repeats = 5)
rf_recipe = head(training(plant_split)) %>%
recipes::recipe(ratio_category ~ .) %>%
recipes::step_string2factor(ratio_category)
rf_tune = parsnip::rand_forest(trees = 500, mtry = tune(), min_n = tune()) %>%
parsnip::set_engine("randomForest") %>%
parsnip::set_mode("classification")
tune_wf = workflows::workflow() %>%
workflows::add_recipe(rf_recipe) %>%
workflows::add_model(rf_tune)
control = control_grid(extract = function(x) extract_model(x))
tune_res = tune::tune_grid(tune_wf, resample=plant_folds, grid=5, control=control)
tunes_metrics = tune::collect_metrics(tune_res)
best_params = tune::select_best(tune_res, "accuracy")
final_rf = tune::finalize_model(rf_tune, best_params)
final_wf = workflow() %>%
add_recipe(rf_recipe) %>%
add_model(final_rf)
final_wf
final_res = final_wf %>%
tune::last_fit(plant_split)
collect_metrics(final_res)
model = tune_res$.extracts[[1]]$.extracts[[1]]
model
randomForest::importance(model)
